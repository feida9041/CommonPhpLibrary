<?php
/**
 * Created by PhpStorm.
 * User: luhaoz
 * Date: 2017/8/29
 * Time: 12:27
 */

namespace luhaoz\cpl\api\plugin;

use luhaoz\cpl\dependence\Dependence;
use luhaoz\cpl\dictionary\Dictionary;
use luhaoz\cpl\prototype\plugin\base\BasePlugin;
use luhaoz\cpl\prototype\property\types\Value;

/**
 * Class ApiDoc
 * @package luhaoz\cpl\api\plugin
 */
class ApiDoc extends BasePlugin
{
    const PLUGIN_NAME = 'apidoc';
    public $paramDictionary = [];
    protected $_paramDictionary = null;

    /**
     * @param null $owner
     * @return \luhaoz\cpl\api\base\ApiDriver;
     */
    public function owner($owner = null)
    {
        return parent::owner($owner); // TODO: Change the autogenerated stub
    }

    public function paramDictionary($paramDictionary = [])
    {

        if ($this->_paramDictionary === null) {
            $this->_paramDictionary = new Dictionary();
        }
        if (!empty($paramDictionary)) {
            $this->_paramDictionary->import($paramDictionary);
        }

        return $this->_paramDictionary;
    }


    protected function getData($data)
    {
        $apiInfo = [];
        preg_match('/\{(.*?)\}\s*(\S*)/', $data, $apiInfo);
        return $apiInfo;
    }

    public function initialise()
    {
        if ($this->owner()->prototype()->reflection()->getAnnotations()->has('api')) {
            $api = $this->owner()->prototype()->reflection()->getAnnotations()->get('api');
            if (is_array($api)) {
                $api = array_shift($api);
            }
            $apiInfo = $this->getData($api);
            if ($this->owner()->prototype()->properties()->property('endpoint')->isEmpty()) {
                $this->owner()->prototype()->properties()->property('endpoint')->set($apiInfo[2]);
            }
            if ($this->owner()->prototype()->properties()->property('method')->isEmpty()) {
                $this->owner()->prototype()->properties()->property('method')->set($apiInfo[1]);
            }
        }
        if ($this->owner()->prototype()->reflection()->getAnnotations()->has('apiParam')) {
            $apiParams = $this->owner()->prototype()->reflection()->getAnnotations()->get('apiParam');
            if (!is_array($apiParams)) {
                $apiParams = [$apiParams];
            }
            foreach ($apiParams as $apiParam) {
                $apiParamInfo = $this->getData($apiParam);
                if (!$this->paramDictionary()->consult($apiParamInfo[1])->isEmpty()) {
                    $config = $this->paramDictionary()->consult($apiParamInfo[1])->value();
                } else {
                    $config = Dependence::dependenceConfig(Value::class);
                }
                $this->owner()->request()->prototype()->properties()->config($apiParamInfo[2], $config);
            }
        }

    }
}