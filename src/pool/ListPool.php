<?php
/**
 * Created by PhpStorm.
 * User: luhaoz
 * Date: 2017/6/29
 * Time: 16:53
 */

namespace luhaoz\cpl\pool;


/**
 * Class ListPool
 * @package luhaoz\cpl\pool
 */
class ListPool implements \luhaoz\cpl\pool\interfaces\HashPool
{
    protected $_indexs = null;
    protected $_datas = null;
    protected $_sortIndex = 0;

    protected function buildSort()
    {
        $sort = $this->_sortIndex;
        $this->_sortIndex += 1;
        return $sort;
    }

    public function indexs()
    {
        if ($this->_indexs === null) {
            $this->_indexs = new HashPool();
        }
        return $this->_indexs;
    }

    public function datas()
    {
        if ($this->_datas == null) {
            $this->_datas = new HashPool();
        }
        return $this->_datas;
    }


    public function set($name, $value, $sort = null)
    {
        $data = $this->datas()->set($name, $value);
        if ($sort === null) {
            $sort = $this->buildSort();
        }
        $this->indexs()->set($name, $sort);
        return $data;
    }

    public function jump($cursor)
    {
//        $coordinate = array_keys($this->_pool);
//        $position = array_search($cursor, $coordinate);
//        if ($position !== false) {
//            $this->reset();
//            for ($index = 1; $index <= $position; $index++) {
//                next($this->_pool);
//            }
//        }
//        return $this;
    }


    public function current()
    {
//        $current = current();
//        return current($this->_pool);
    }

//    protected $_poolIndex = [];
//
//    public function set($key, $value,$index = null)
//    {
//
//        return parent::set($key, $value); // TODO: Change the autogenerated stub
//    }
//
//

//
//    public function next()
//    {
//        return next($this->_pool);
//    }

//    public function previous()
//    {
//        return prev($this->_pool);
//    }
//
//    public function reset()
//    {
//        return reset($this->_pool);
//    }
//
//    public function jump($cursor)
//    {
//        $coordinate = array_keys($this->_pool);
//        $position = array_search($cursor, $coordinate);
//        if ($position !== false) {
//            $this->reset();
//            for ($index = 1; $index <= $position; $index++) {
//                next($this->_pool);
//            }
//        }
//        return $this;
//    }
//
//    public function distance($end, $start = null)
//    {
//        $distanceList = [];
//        $coordinate = array_keys($this->_pool);
//        $position = array_search($end, $coordinate);
//        if ($position !== false) {
//            if ($start === null) {
//                reset($this->_pool);
//            } else {
//                $this->jump($start);
//            }
//
//            for ($index = 1; $index <= $position; $index++) {
//                $distanceList[] = current($this->_pool);
//                next($this->_pool);
//            }
//        }
//        reset($this->_pool);
//        return $distanceList;
//    }
    public function get($name)
    {
        return $this->datas()->get($name);
    }

    public function del($name)
    {
        return $this->datas()->del($name);
    }

    public function clear()
    {
        return $this->datas()->clear();
    }

    public function has($name)
    {
        return $this->datas()->has($name);
    }

    public function batch($batchs)
    {
        return $this->datas()->batch($batchs);
    }

    public function all()
    {
        return $this->datas()->all();
    }
}