<?php
/**
 * Created by PhpStorm.
 * User: luhaoz
 * Date: 2017/6/30
 * Time: 15:19
 */

namespace luhaoz\cpl\prototype\plugin;

use luhaoz\cpl\dependence\Dependence;
use luhaoz\cpl\dependence\DependencePool;
use luhaoz\cpl\event\traits\Event;
use luhaoz\cpl\prototype\base\BaseManager;
use luhaoz\cpl\prototype\plugin\base\BasePlugin;
use luhaoz\cpl\prototype\plugin\interfaces\Plugin;
use luhaoz\cpl\prototype\traits\Prototype;


/**
 * Class PluginManager
 * @package luhaoz\cpl\prototype\plugin
 */
class PluginManager extends BaseManager
{
    public function buildContainer()
    {
        $container = parent::buildContainer(); // TODO: Change the autogenerated stub
        $container->events()->on(DependencePool::EVENT_DEPENDENCE_CONFIG, function ($config) {
            $config['__hook.instantiate'] = function (Plugin $instance) use ($config) {
                $instance->owner($this->owner());
            };
            return $config;
        });
        return $container;
    }


    /**
     * @param $name
     * @return BasePlugin
     */
    public function plugin($name)
    {
        return $this->container()->dependence($name);
    }

    public function setup($pluginName, $config)
    {
        $this->container()->config($pluginName, $config);
        $plugin = $this->plugin($pluginName);
        $plugin->install($config);
        if ($this->events()->has('setup.after')) {
            $this->events()->trigger('setup.after', [$plugin]);
        }
        return $this;
    }

    public function setups($pluginConfigs)
    {
        foreach ($pluginConfigs as $pluginName => $pluginConfig) {
            $this->setup($pluginName, $pluginConfig);
        }
        return $this;
    }
}