<?php
/**
 * Created by PhpStorm.
 * User: luhaoz
 * Date: 2017/8/29
 * Time: 12:27
 */

namespace luhaoz\cpl\prototype\property\plugin;

use luhaoz\cpl\dependence\Dependence;
use luhaoz\cpl\prototype\method\types\Method;
use luhaoz\cpl\prototype\plugin\base\BasePlugin;
use luhaoz\cpl\prototype\property\base\BaseProperty;
use luhaoz\cpl\prototype\property\plugin\filter\base\BaseFilter;
use luhaoz\cpl\prototype\property\types\Value;

/**
 * Class Filter
 * @package luhaoz\cpl\prototype\property\plugin
 */
class Filter extends BasePlugin
{
    const PLUGIN_NAME = 'filter';

    /**
     * @param null $owner
     * @return \luhaoz\cpl\prototype\property\PropertyManager;
     */
    public function owner($owner = null)
    {
        return parent::owner($owner); // TODO: Change the autogenerated stub
    }

    public function initialise()
    {
        $this->owner()->prototype()->propertys()->config('__filter', Dependence::dependenceMapper(Value::class));
        $this->owner()->prototype()->methods()->config('filter', Dependence::dependenceMapper(Method::class, [
            '::method' => [[$this, '__filter']],
        ]));
        $this->owner()->prototype()->methods()->config('values', Dependence::dependenceMapper(Method::class, [
            '::method' => [[$this, '__values']],
        ]));
    }

    public function __filter(BaseFilter $filter)
    {
        $filter->source($this);
        return $filter;
    }

    public function __values($values = null)
    {
        if (!empty($values) && is_array($values)) {
            foreach ($values as $propertyName => $propertyValue) {
                if ($this->is($propertyName)) {
                    $this->property($propertyName)->set($propertyValue);
                }
            }
        }
        $values = [];
        foreach ($this->memberIterator() as $propertyName => $property) {
            if ($property instanceof BaseProperty) {
                $values[$propertyName] = $property->toData();
            }
        }
        return $values;
    }
}