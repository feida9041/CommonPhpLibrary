<?php
/**
 * Created by PhpStorm.
 * User: luhaoz
 * Date: 2017/6/30
 * Time: 15:19
 */

namespace luhaoz\cpl\prototype\method;

use luhaoz\cpl\dependence\Dependence;
use luhaoz\cpl\dependence\DependencePool;
use luhaoz\cpl\prototype\base\BaseManager;
use luhaoz\cpl\prototype\method\base\BaseMethod;
use luhaoz\cpl\prototype\method\types\Call;
use luhaoz\cpl\prototype\method\types\Native;
use luhaoz\cpl\prototype\traits\Prototype;

/**
 * Class MethodManager
 * @package luhaoz\cpl\prototype\method
 */
class MethodManager extends BaseManager
{
    public function buildContainer()
    {
        $container = parent::buildContainer(); // TODO: Change the autogenerated stub
        $container->events()->on(DependencePool::EVENT_DEPENDENCE_CONFIG, function ($config) {
            $config['__hook.instantiate'] = function (BaseMethod $instance) use ($config) {
                $instance->owner($this->owner());
            };
            return $config;
        });

        $publicNatives = $this->owner()->prototype()->reflection()->getMethods(\ReflectionMethod::IS_PUBLIC);
        if (!empty($publicNatives)) {
            foreach ($publicNatives as $publicNative) {
                if (in_array($publicNative->getName(), ['__set', '__get', '__call', '__property_exists', '__method_exists', '_constructed', 'prototype'])) {
                    continue;
                }
                $container->config($publicNative->getName(), Dependence::dependenceConfig(Native::class, [
                    '::nativeInstance' => [$publicNative],
                ]));
            }
        }

        return $container;
    }

    /**
     * @param $name
     * @return Call
     */
    public function method($name)
    {
        return $this->container()->dependence($name);
    }
}